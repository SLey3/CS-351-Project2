from abc import ABC, abstractmethod
from typing import List

# Interface definitions
class IVertex(ABC):
    @abstractmethod
    def get_name(self) -> str: ...
    
    @abstractmethod
    def set_name(self, name: str) -> None: ...
    
    @abstractmethod
    def add_edge(self, edge: "IEdge") -> None: ...
    
    @abstractmethod
    def remove_edge(self, edge_name: str) -> None: ...
    
    @abstractmethod
    def get_edges(self) -> List["IEdge"]: ...
    
    @abstractmethod
    def add_cords(self, lat: float, long: float) -> None: ...
    
    @abstractmethod
    def get_cords(self) -> tuple[float, float]: ...
    
    @abstractmethod
    def remove_cords(self) -> None: ...
    
    @abstractmethod
    def set_visited(self, visited: bool) -> None: ...
    
    @property
    @abstractmethod
    def is_visited(self) -> bool: ...
    
    @abstractmethod
    def __str__(self) -> str: ...
    @abstractmethod
    def __repr__(self) -> str: ...
    @abstractmethod
    def __eq__(self, obj: object) -> bool: ...
    @abstractmethod
    def __hash__(self) -> int: ...
    
    
class IEdge(ABC):
    @abstractmethod
    def get_name(self) -> str: ...
    
    @abstractmethod
    def set_name(self, name: str) -> None: ...
    
    @abstractmethod
    def set_destination(self, dest: IVertex) -> None: ...
    
    @abstractmethod
    def get_destination(self) -> IVertex: ...
    
    @abstractmethod
    def get_weight(self) -> float: ...
    
    @abstractmethod
    def set_weight(self, weight: float) -> None: ...
    
    @abstractmethod
    def __str__(self) -> str: ...
    @abstractmethod
    def __repr__(self) -> str: ...

class IGraph(ABC):
    @abstractmethod
    def get_vertices(self) -> List[IVertex]: ...
    
    @abstractmethod
    def get_edges(self) -> List[IEdge]: ...
    
    @abstractmethod
    def add_vertex(self, vertex: IVertex) -> None: ...
    
    @abstractmethod
    def remove_vertex(self, vertex_name: str) -> None: ...
    
    @abstractmethod
    def add_edge(self, edge: IEdge) -> None: ...
    
    @abstractmethod
    def remove_edge(self, edge_name: str) -> None: ...